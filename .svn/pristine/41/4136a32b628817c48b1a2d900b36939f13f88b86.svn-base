package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;

import javax.swing.JPanel;

public class DrawingArea extends JPanel {
    
    private int myThickness = 5;
    /**
     * The path being created.
     */
    private final GeneralPath myPath;

    private double myOriginalX;
    private double myOriginalY;

    private double myEndingX;
    private double myEndingY;

    private Line2D myLine;

    private int MY_ORIGINAL_WIDTH = 500;
    private int MY_ORIGINAL_HEIGHT = 350;
    public DrawingArea(){
        setPreferredSize(new Dimension(MY_ORIGINAL_WIDTH, MY_ORIGINAL_HEIGHT));
        myPath = new GeneralPath();
        myLine = null; 
        addMouseListener(new MyMouseClicker());
        addMouseMotionListener(new MyMouseAdapter());
    }
    
    @Override
    public void paintComponent(final Graphics theGraphic){
        super.paintComponent(theGraphic);
        
        if (myOriginalX != 0 && myOriginalY != 0
                                        && myEndingX != 0 && myEndingY != 0) {
            final Graphics2D g2d = (Graphics2D) theGraphic;
    
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                 RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setStroke(new BasicStroke(myThickness));
    //        g2d.draw(myPath);
    
            final Line2D line = new Line2D.Double(myOriginalX, myOriginalY, 
                                                  myEndingX, myEndingY);
    //        line.setLine(x1, y1, x2, y2);
            g2d.setPaint(Color.BLACK);
    //        g2d.setStroke(new BasicStroke(myThickness));
            g2d.draw(line);
        }
    }
    
    public void setThickness(final int theThickness) {
        myThickness = theThickness;
    }
    
    
    private class MyMouseClicker extends MouseAdapter
    {
        @Override
        public void mousePressed(final MouseEvent theEvent)
        {
           myOriginalX = theEvent.getX();
           myOriginalY = theEvent.getY();
        }
        
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
//            myPath.closePath();
            myEndingX = theEvent.getX();
            myEndingY = theEvent.getY();
            repaint();
        }

    }
    
    /**
     * Creates a MouseHandler for mouse clicks.
     * @author anthonyzullo
     */
    private class MyMouseAdapter extends MouseAdapter
    {
                 
        @Override
        public void mouseDragged(final MouseEvent theEvent) {
//            myPath.moveTo(myOriginalX, myOriginalY);
//            myPath.lineTo(theEvent.getX(), theEvent.getY());
            myEndingX = theEvent.getX();
            myEndingY = theEvent.getY();
            
            repaint();
        }
                          
    }
}
